<?php

namespace App\Listeners;

use App\Events\LoadSinks;
use App\Signature\ConditionalSink;
use App\Signature\Signature;
use App\Utility\Regex;
use App\Vulnerabilities\Definitions\CommandInjection;
use App\Vulnerabilities\Definitions\Conditions\MatchesSignature;
use App\Vulnerabilities\Definitions\Conditions\RequiresPastCallLike;
use App\Vulnerabilities\Definitions\Conditions\RequiresPastInstantiation;
use App\Vulnerabilities\Definitions\CustomSink;
use App\Vulnerabilities\Definitions\FileInclusion;
use App\Vulnerabilities\Definitions\MySQLInjection;
use App\Vulnerabilities\Severity;
use App\Vulnerabilities\VulnerabilityCollection;

class StandardVulnerabilityListener
{
    /**
     * Handle the event.
     *
     * @param  object  $event
     * @return void
     */
    public function handle(LoadSinks $event)
    {
        $vulnerabilities = new VulnerabilityCollection();

        $vulnerabilities->push(
            new CommandInjection(),
            new MySQLInjection(),
            new FileInclusion(),
            new ConditionalSink(
                [
                    new MatchesSignature(new Signature(Regex::ANY_WORD, 'query')),
                    new RequiresPastCallLike(new Signature('new', 'mysqli'))
                ],
                'MySQLi Database Injection',
                Severity::HIGH,
                'Parameterise your queries.'
            )
        );

        return $vulnerabilities;
    }
}
