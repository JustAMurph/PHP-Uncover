<?php

namespace App\Vulnerabilities;

use App\Parser\VariableContext;
use PhpParser\Node\Expr;
use PhpParser\Node\Expr\CallLike;
use PhpParser\Node\Expr\FuncCall;

abstract class BaseVulnerability implements IVulnerability
{
    public array $functions = [];
    protected array $expressions = [];

    abstract function getDescription(): string;
    abstract function getSeverity(): Severity;
    abstract function getRemediation(): string;

    public function isExecutedBy(CallLike $callLike, VariableContext $context) : bool
    {
        if ($callLike instanceof FuncCall) {
            return (in_array($callLike->name->getFirst(), $this->functions));
        }

        return false;
    }

    public function isVulnerableExpression(Expr $expr) : bool
    {
        foreach ($this->expressions as $possible)
        {
            if (is_a($expr, $possible)) {
                return true;
            }
        }

        return false;
    }
}
